// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/dingotiles/dingo-postgresql-broker/broker/interfaces"
	"github.com/dingotiles/dingo-postgresql-broker/broker/structs"
)

type FakePatroni struct {
	ClusterLeaderStub        func(structs.ClusterID) (string, error)
	clusterLeaderMutex       sync.RWMutex
	clusterLeaderArgsForCall []struct {
		arg1 structs.ClusterID
	}
	clusterLeaderReturns struct {
		result1 string
		result2 error
	}
	WaitForMemberStub        func(instanceID structs.ClusterID, memberID string) error
	waitForMemberMutex       sync.RWMutex
	waitForMemberArgsForCall []struct {
		instanceID structs.ClusterID
		memberID   string
	}
	waitForMemberReturns struct {
		result1 error
	}
	WaitForAllMembersStub        func(instanceID structs.ClusterID, expectedNodeCount int) error
	waitForAllMembersMutex       sync.RWMutex
	waitForAllMembersArgsForCall []struct {
		instanceID        structs.ClusterID
		expectedNodeCount int
	}
	waitForAllMembersReturns struct {
		result1 error
	}
	WaitForLeaderStub        func(structs.ClusterID) error
	waitForLeaderMutex       sync.RWMutex
	waitForLeaderArgsForCall []struct {
		arg1 structs.ClusterID
	}
	waitForLeaderReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePatroni) ClusterLeader(arg1 structs.ClusterID) (string, error) {
	fake.clusterLeaderMutex.Lock()
	fake.clusterLeaderArgsForCall = append(fake.clusterLeaderArgsForCall, struct {
		arg1 structs.ClusterID
	}{arg1})
	fake.recordInvocation("ClusterLeader", []interface{}{arg1})
	fake.clusterLeaderMutex.Unlock()
	if fake.ClusterLeaderStub != nil {
		return fake.ClusterLeaderStub(arg1)
	} else {
		return fake.clusterLeaderReturns.result1, fake.clusterLeaderReturns.result2
	}
}

func (fake *FakePatroni) ClusterLeaderCallCount() int {
	fake.clusterLeaderMutex.RLock()
	defer fake.clusterLeaderMutex.RUnlock()
	return len(fake.clusterLeaderArgsForCall)
}

func (fake *FakePatroni) ClusterLeaderArgsForCall(i int) structs.ClusterID {
	fake.clusterLeaderMutex.RLock()
	defer fake.clusterLeaderMutex.RUnlock()
	return fake.clusterLeaderArgsForCall[i].arg1
}

func (fake *FakePatroni) ClusterLeaderReturns(result1 string, result2 error) {
	fake.ClusterLeaderStub = nil
	fake.clusterLeaderReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePatroni) WaitForMember(instanceID structs.ClusterID, memberID string) error {
	fake.waitForMemberMutex.Lock()
	fake.waitForMemberArgsForCall = append(fake.waitForMemberArgsForCall, struct {
		instanceID structs.ClusterID
		memberID   string
	}{instanceID, memberID})
	fake.recordInvocation("WaitForMember", []interface{}{instanceID, memberID})
	fake.waitForMemberMutex.Unlock()
	if fake.WaitForMemberStub != nil {
		return fake.WaitForMemberStub(instanceID, memberID)
	} else {
		return fake.waitForMemberReturns.result1
	}
}

func (fake *FakePatroni) WaitForMemberCallCount() int {
	fake.waitForMemberMutex.RLock()
	defer fake.waitForMemberMutex.RUnlock()
	return len(fake.waitForMemberArgsForCall)
}

func (fake *FakePatroni) WaitForMemberArgsForCall(i int) (structs.ClusterID, string) {
	fake.waitForMemberMutex.RLock()
	defer fake.waitForMemberMutex.RUnlock()
	return fake.waitForMemberArgsForCall[i].instanceID, fake.waitForMemberArgsForCall[i].memberID
}

func (fake *FakePatroni) WaitForMemberReturns(result1 error) {
	fake.WaitForMemberStub = nil
	fake.waitForMemberReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePatroni) WaitForAllMembers(instanceID structs.ClusterID, expectedNodeCount int) error {
	fake.waitForAllMembersMutex.Lock()
	fake.waitForAllMembersArgsForCall = append(fake.waitForAllMembersArgsForCall, struct {
		instanceID        structs.ClusterID
		expectedNodeCount int
	}{instanceID, expectedNodeCount})
	fake.recordInvocation("WaitForAllMembers", []interface{}{instanceID, expectedNodeCount})
	fake.waitForAllMembersMutex.Unlock()
	if fake.WaitForAllMembersStub != nil {
		return fake.WaitForAllMembersStub(instanceID, expectedNodeCount)
	} else {
		return fake.waitForAllMembersReturns.result1
	}
}

func (fake *FakePatroni) WaitForAllMembersCallCount() int {
	fake.waitForAllMembersMutex.RLock()
	defer fake.waitForAllMembersMutex.RUnlock()
	return len(fake.waitForAllMembersArgsForCall)
}

func (fake *FakePatroni) WaitForAllMembersArgsForCall(i int) (structs.ClusterID, int) {
	fake.waitForAllMembersMutex.RLock()
	defer fake.waitForAllMembersMutex.RUnlock()
	return fake.waitForAllMembersArgsForCall[i].instanceID, fake.waitForAllMembersArgsForCall[i].expectedNodeCount
}

func (fake *FakePatroni) WaitForAllMembersReturns(result1 error) {
	fake.WaitForAllMembersStub = nil
	fake.waitForAllMembersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePatroni) WaitForLeader(arg1 structs.ClusterID) error {
	fake.waitForLeaderMutex.Lock()
	fake.waitForLeaderArgsForCall = append(fake.waitForLeaderArgsForCall, struct {
		arg1 structs.ClusterID
	}{arg1})
	fake.recordInvocation("WaitForLeader", []interface{}{arg1})
	fake.waitForLeaderMutex.Unlock()
	if fake.WaitForLeaderStub != nil {
		return fake.WaitForLeaderStub(arg1)
	} else {
		return fake.waitForLeaderReturns.result1
	}
}

func (fake *FakePatroni) WaitForLeaderCallCount() int {
	fake.waitForLeaderMutex.RLock()
	defer fake.waitForLeaderMutex.RUnlock()
	return len(fake.waitForLeaderArgsForCall)
}

func (fake *FakePatroni) WaitForLeaderArgsForCall(i int) structs.ClusterID {
	fake.waitForLeaderMutex.RLock()
	defer fake.waitForLeaderMutex.RUnlock()
	return fake.waitForLeaderArgsForCall[i].arg1
}

func (fake *FakePatroni) WaitForLeaderReturns(result1 error) {
	fake.WaitForLeaderStub = nil
	fake.waitForLeaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePatroni) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clusterLeaderMutex.RLock()
	defer fake.clusterLeaderMutex.RUnlock()
	fake.waitForMemberMutex.RLock()
	defer fake.waitForMemberMutex.RUnlock()
	fake.waitForAllMembersMutex.RLock()
	defer fake.waitForAllMembersMutex.RUnlock()
	fake.waitForLeaderMutex.RLock()
	defer fake.waitForLeaderMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePatroni) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.Patroni = new(FakePatroni)
